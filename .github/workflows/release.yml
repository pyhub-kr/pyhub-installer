name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: make test

      - name: Build all platforms
        run: |
          # Create build directory
          mkdir -p dist
          
          # Get build information
          VERSION="${{ github.ref_name }}"
          COMMIT="${{ github.sha }}"
          SHORT_COMMIT="${COMMIT:0:7}"
          BUILD_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          # Build matrix
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
          )
          
          for platform in "${platforms[@]}"; do
            IFS='/' read -r -a platform_split <<< "$platform"
            GOOS="${platform_split[0]}"
            GOARCH="${platform_split[1]}"
            
            # Set binary name
            binary_name="pyhub-installer"
            if [ "$GOOS" = "windows" ]; then
              binary_name="${binary_name}.exe"
            fi
            
            # Set output name
            output_name="pyhub-installer-${GOOS}-${GOARCH}"
            
            echo "Building for $GOOS/$GOARCH..."
            
            # Build with version information
            CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH \
              go build -v -ldflags "-s -w -X main.version=${VERSION} -X main.commit=${SHORT_COMMIT} -X main.date=${BUILD_DATE}" \
              -o "dist/${binary_name}" \
              ./cmd/pyhub-installer
            
            # Create archive
            if [ "$GOOS" = "windows" ]; then
              # Create zip for Windows
              (cd dist && zip -j "${output_name}.zip" "${binary_name}")
              # Generate checksum
              (cd dist && sha256sum "${output_name}.zip" > "${output_name}.zip.sha256")
            else
              # Create tar.gz for Unix
              (cd dist && tar czf "${output_name}.tar.gz" "${binary_name}")
              # Generate checksum
              (cd dist && sha256sum "${output_name}.tar.gz" > "${output_name}.tar.gz.sha256")
            fi
            
            # Clean up binary
            rm -f "dist/${binary_name}"
          done
          
          # List all artifacts
          echo "Build artifacts:"
          ls -la dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## Release ${{ github.ref_name }}
            
            ### Installation
            
            #### macOS (Apple Silicon)
            ```bash
            curl -L https://github.com/pyhub-kr/pyhub-installer/releases/download/${{ github.ref_name }}/pyhub-installer-darwin-arm64.tar.gz | tar -xz
            ```
            
            #### macOS (Intel)
            ```bash
            curl -L https://github.com/pyhub-kr/pyhub-installer/releases/download/${{ github.ref_name }}/pyhub-installer-darwin-amd64.tar.gz | tar -xz
            ```
            
            #### Linux (x64)
            ```bash
            curl -L https://github.com/pyhub-kr/pyhub-installer/releases/download/${{ github.ref_name }}/pyhub-installer-linux-amd64.tar.gz | tar -xz
            ```
            
            #### Windows (x64)
            ```powershell
            Invoke-WebRequest -Uri "https://github.com/pyhub-kr/pyhub-installer/releases/download/${{ github.ref_name }}/pyhub-installer-windows-amd64.zip" -OutFile "pyhub-installer.zip"
            Expand-Archive -Path "pyhub-installer.zip" -DestinationPath "."
            ```
            
            ### Checksums
            All files include `.sha256` checksum files for verification.
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}